package ua.step.spring.model.knight;

/**
 * Кажется, что менестрель должен просто делать свою работу, без напоминаний со
 * стороны рыцаря. В конце концов, менестрель сам должен позаботиться о том,
 * чтобы воспеть подвиги своего рыцаря. С какой стати рыцарь должен напоминать
 * менестрелю, чтобы тот не забывал выполнять свою работу? Кроме того, из-за
 * того что рыцарь должен знать о существовании менестреля, мы вынуждены
 * внедрять компонент Minstrel в компонент StupidKnight. Это не только усложняет
 * реализацию класса StupidKnight, но также заставляет задаться вопросом: может
 * ли рыцарь обойтись без менестреля? Что, если ссылка minstrel будет иметь
 * значение null? Следует ли предусмотреть такой случай и проверять значение
 * ссылки? Простой класс каким был BraveKnight начинает становиться все более
 * сложным и мог бы стать еще сложнее, если бы в него пришлось добавить проверку
 * ссылки minstrel на равенство значению null.
 * 
 * @author VUnguryan
 *
 */
public class StupidKnight implements Knight {
	private Quest quest;
	private Minstrel minstrel = new Minstrel();

	public StupidKnight(Quest quest) {
		this.quest = quest;
	}

	public void embarkOnQuest() throws QuestException {
		// Действительно ли рыцарь должен беспокоиться о руководстве своим
		// менестрелем?
		minstrel.singBeforeQuest();

		quest.embark("Не очень умный рыцарь:");

		minstrel.singAfterQuest();
	}
}